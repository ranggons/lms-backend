name: Rangon Backend CI/CD Testing

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  prepare-env:
    name: Preparing Environment
    runs-on: ubuntu-latest

    env:
      DB_DATABASE: rangon_test
      DB_USERNAME: root
      DB_PASSWORD: password
      DB_HOST: 127.0.0.1
      DB_PORT: 32574
      REDIS_PORT: 6379
      BROADCAST_DRIVER: log
      # CACHE_DRIVER: redis
      # QUEUE_CONNECTION: redis
      # SESSION_DRIVER: redis
      MYSQL_ALLOW_EMPTY_PASSWORD: false
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: rangon_test

    services:

      mariadb:
        image: mariadb:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: rangon_test
        ports:
          - 32574:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      # redis:
      #   image: redis
      #   ports:
      #     - 6379/tcp
      #   options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      fail-fast: true
      matrix:
        php-version: ['8.2']

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, mysql, libxml, xml, xmlwriter, dom, tokenizer, filter, json, phar, pcre, openssl, pdo, intl, curl, imagick, sodium, php-redis
          tools: composer:v2
          coverage: xdebug

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer Dependencies
        run: composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader

      - name: Prepare the application
        run: |
          php -r "copy('.env.testing', '.env');"
          php artisan key:generate

      - name: Clear config
        run:  php artisan config:clear

      - name: Run Migration
        run: php artisan migrate
      - name: Begin Testing
        run: vendor/bin/phpunit --coverage-text --testsuite="Super User Rangon"

  # laravel-tests:

  #   runs-on: ubuntu-latest

  #   services:
  #     mysql:
  #       image: mysql:latest
  #       env:
  #         MYSQL_ROOT_PASSWORD: ''
  #         MYSQL_DATABASE: rangon_test
  #       ports:
  #         - 33306:3306
  #       options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

  #   steps:
  #   - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
  #     with:
  #       php-version: '8.2'
  #   - uses: actions/checkout@v3
  #   - name: Copy .env
  #     run: php -r "file_exists('.env') || copy('.env.example', '.env');"
  #   - name: Install Dependencies
  #     run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
  #   - name: Generate key
  #     run: php artisan key:generate
  #   - name: Directory Permissions
  #     run: chmod -R 777 storage bootstrap/cache
  #   - name: Create Database
  #     run: |
  #       mkdir -p database
  #       touch database/database.sqlite
  #   - name: Execute tests (Unit and Feature tests) via PHPUnit
  #     env:
  #       DB_CONNECTION: sqlite
  #       DB_DATABASE: database/database.sqlite
  #     run: vendor/bin/phpunit
